# -*- coding: utf-8 -*-
# get location 
import requests
import json
response = requests.get('http://ipinfo.io/json/')
my_json = response.content.decode('utf8').replace("'", '"')
#print(my_json)
#print('- ' * 20)
location = json.loads(my_json)
#print(location)

loc = location["loc"]

l = []
l = loc.split(",")

latitude = l[0]
longitude = l[1]
print(latitude)
print(longitude)

# Python program to find current  
# weather details of any city 
# using openweathermap api 
  
# import required modules 
import requests, json 
  
# Enter your API key here 
api_key = "*************"
  
# base_url variable to store url 
base_url = "http://api.openweathermap.org/data/2.5/weather?"
#api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}
  
# Give city name 
#city_name = input("Enter city name : ") 
  
# complete_url variable to store 
# complete url address 
#complete_url = base_url + "appid=" + api_key + "&q=San Jose" 
complete_url = base_url + "appid=" + api_key + "&lat=" + latitude + "&lon=" + longitude 

# get method of requests module 
# return response object 
response = requests.get(complete_url) 
  
# json method of response object  
# convert json format data into 
# python format data 
x = response.json() 
print(x)
# Now x contains list of nested dictionaries 
# Check the value of "cod" key is equal to 
# "404", means city is found otherwise, 
# city is not found 
if x["cod"] != "404": 
  
    # store the value of "main" 
    # key in variable y 
    y = x["main"] 
  
    # store the value corresponding 
    # to the "temp" key of y 
    current_temperature = y["temp"] 
  
    # store the value corresponding 
    # to the "pressure" key of y 
    current_pressure = y["pressure"] 
  
    # store the value corresponding 
    # to the "humidity" key of y 
    current_humidiy = y["humidity"] 
  
    # store the value of "weather" 
    # key in variable z 
    z = x["weather"] 
  
    # store the value corresponding  
    # to the "description" key at  
    # the 0th index of z 
    weather_description = z[0]["description"] 
  
    # print following values 
    print(" Temperature (in kelvin unit) = " +
                    str(current_temperature) + 
          "\n atmospheric pressure (in hPa unit) = " +
                    str(current_pressure) +
          "\n humidity (in percentage) = " +
                    str(current_humidiy) +
          "\n description = " +
                    str(weather_description)) 
  
else: 
    print(" City Not Found ")

import requests
import numpy as np
import pandas as pd

url = "https://air-quality.p.rapidapi.com/current/airquality"

querystring = {"lon":longitude,"lat":latitude}

headers = {
    'x-rapidapi-host': "air-quality.p.rapidapi.com",
    'x-rapidapi-key': "****************************"
    }

response = requests.request("GET", url, headers=headers, params=querystring)

x = response.json() 
y = x["data"]

co = y[0]["co"]

no2 = y[0]["no2"]
o3 = y[0]["o3"]
pm10 = y[0]["pm10"]
pm25 = y[0]["pm25"]
so2 = y[0]["so2"]

# converting kelvin to degree celcius
temperature = current_temperature 
temperature = temperature - 273.15

arr = np.array([[co, no2, o3, temperature, current_humidiy]])
arr
apidata = pd.DataFrame(arr, columns=["co", "no2", "o3", "current_temperature", "current_humidity"])
#apidata = apidata.transform
apidata
#cols = ["co", "no2", "03", "pm10", "pm25", "s02"]
#y[cols]

#from sklearn.externals.joblib import extjoblib
import joblib
from joblib import dump, load
joblib_LR_model = joblib.load("/home/pi/Desktop/AsthmaRiskPrediction/CMPE295_Asthma_Risk_Prediction_Model_20201202.joblib")


joblib_LR_model

predict = joblib_LR_model.predict(apidata)
prediction = predict[0]
print(prediction)

#pip install mysql-connector-python-rf

import mysql.connector;
from mysql.connector import Error
from mysql.connector import errorcode
print(apidata)
connection = mysql.connector.connect(host='database-asthma.chopwqznfm2g.us-west-1.rds.amazonaws.com',
                             database='Asthma',
                             user='*****',
                             password='******', auth_plugin='mysql_native_password')
print(temperature)
print(current_humidiy)

curs = connection.cursor(buffered=True)
query0="UPDATE AirQualityData2 SET Temperature = {} ,Humidity = {}, CO = {}, NO2 = {}, O3 = {}, AsthmaRisk = {} where id = {}".format(temperature,current_humidiy, co, no2, o3, prediction, 1) 
#insert_tuple0 = (120,current_humidiy, co, no2, o3, asthmaRisk)
curs.execute(query0)
#query2 = "select * from AirQualityData"
#curs.execute(query2)
records = curs.fetchone()
print(records)
connection.commit()
print("Successful Execution")


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































12
